[{"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\index.js":"1","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\App.js":"2","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Form.js":"3","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Blog.js":"4","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Search.js":"5","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Blogs.js":"6","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Notification.js":"7","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Error.js":"8","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\services\\blogbook.js":"9","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\services\\login.js":"10","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Login.js":"11"},{"size":169,"mtime":1612466591068,"results":"12","hashOfConfig":"13"},{"size":8463,"mtime":1615483820208,"results":"14","hashOfConfig":"13"},{"size":783,"mtime":1615420646760,"results":"15","hashOfConfig":"13"},{"size":237,"mtime":1614716029783,"results":"16","hashOfConfig":"13"},{"size":234,"mtime":1612899500685,"results":"17","hashOfConfig":"13"},{"size":548,"mtime":1614716154819,"results":"18","hashOfConfig":"13"},{"size":454,"mtime":1612986601167,"results":"19","hashOfConfig":"13"},{"size":462,"mtime":1613003202437,"results":"20","hashOfConfig":"13"},{"size":1173,"mtime":1615483702706,"results":"21","hashOfConfig":"13"},{"size":209,"mtime":1615420640371,"results":"22","hashOfConfig":"13"},{"size":722,"mtime":1615420645596,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1vn3xn8",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\index.js",[],["50","51"],"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\App.js",["52"],"//import react + components\r\nimport React, { useState, useEffect, useImperativeHandle } from 'react'\r\nimport Form from './components/Form'\r\nimport Blog from './components/Blog'\r\nimport Search from './components/Search'\r\nimport Blogs from './components/Blogs'\r\nimport blogService from './services/blogbook'\r\nimport Notification from './components/Notification'\r\nimport Error from './components/Error'\r\nimport Login from './components/Login'\r\nimport loginService from './services/login'\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  //establishes states\r\n  const [ blogs, setBlogs ] = useState([]) \r\n  const [ newTitle, setNewTitle ] = useState('')\r\n  const [ newAuthor, setNewAuthor ] = useState('')\r\n  const [ newUrl, setNewUrl ] = useState('')\r\n  const [ newLikes, setNewLikes ] = useState('')\r\n  const [ newSearch, setNewSearch] = useState('')\r\n  const [alertMessage, setAlertMessage] = useState(null)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [username, setNewUsername] = useState('') \r\n  const [password, setNewPassword] = useState('') \r\n  const [user, setUser] = useState(null)\r\n\r\n  //use axios to get import db.json file requires json server to be run\r\n  useEffect(() => {\r\n   blogService\r\n      .getAll()\r\n      .then(initialBook => {\r\n        setBlogs(initialBook)     \r\n  }).catch(error =>{\r\n    setErrorMessage(\r\n      `unable to connect to server`\r\n    )\r\n    setTimeout(() => {\r\n      setErrorMessage(null)\r\n    }, 5000)\r\n  })\r\n  }, [])\r\n \r\n\r\n\r\n//handles button click when the title field is a new value\r\n  const addBlog = () => {\r\n    \r\n    // blog generated from  entry fields\r\n    const blogObject = {\r\n      title: newTitle,\r\n      author: newAuthor,  \r\n      url: newUrl,\r\n      likes: newLikes\r\n    }\r\n   \r\n      //use axios to add blog to to blogs state array\r\n       blogService\r\n      .create(blogObject)\r\n      .then( returnedBlog => {\r\n        setAlertMessage(\r\n          `Added ${returnedBlog.title} to the server`\r\n        )\r\n        setTimeout(() => {\r\n          setAlertMessage(null)\r\n        }, 5000)\r\n        setBlogs(blogs.concat(returnedBlog))\r\n        setNewTitle('')\r\n        setNewAuthor('') \r\n        setNewUrl('')\r\n        setNewLikes('')\r\n    })\r\n    .catch(error => {\r\n      console.log(\"error:\",error.response.data.error)\r\n      setErrorMessage(\r\n        error.response.data.error||`unable to connect to server`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    })\r\n    \r\n  }\r\n\r\n\r\n//handles button click when title field is an existing value\r\n  const updateBlog = () => {\r\n\r\n    // asks user if this is what they ment to do\r\n    const confirm = window.confirm(\r\n      `${newTitle} is already added to blog list, replace the old blog entry with new one?`\r\n    );\r\n\r\n    // uses find method on blogs array to match change with existing entry \r\n    const blogToUpdate = blogs.find((item) => item.title === newTitle)\r\n    ;\r\n    //uses copy method to return a new object with old title and new other info\r\n    const updatedBlog = { ...blogToUpdate, author: newAuthor, url: newUrl, likes: newLikes };\r\n\r\n    //only executes if user selects \"ok\" in prompt window\r\n    if (confirm) {\r\n\r\n      //axios put method to update the server\r\n      blogService\r\n        .update(updatedBlog.id, updatedBlog)\r\n        .then((response) => {\r\n          setAlertMessage(\r\n            `Updated ${updatedBlog.title}'s entry`\r\n          )\r\n          setTimeout(() => {\r\n            setAlertMessage(null)\r\n          }, 5000)\r\n\r\n          //takes response from json server and alters state array, returns identical\r\n          //object if id does not match. if the id does match alter object to be response\r\n          setBlogs(blogs.map((item) => (item.id === response.id ? response : item)))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `'${updatedBlog.title}' was removed by another user`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setBlogs(blogs.filter(n => n.id !== updatedBlog.id))     \r\n      })\r\n      }\r\n  }\r\n\r\n//handles delete button click\r\nconst removeEntry = (event) => {\r\n  event.preventDefault()\r\n const id = event.target.value\r\n //when called promts user\r\n const confirm = window.confirm(\"are you sure?\")\r\n // finds the blog to update\r\n const blogToUpdate = blogs.find((item) => item.id === id)\r\nconsole.log(blogToUpdate)\r\n //check to see if the user confirms in the prompt window\r\n if (confirm){\r\n\r\n  //calls axios delete method to remove the blog from the  database\r\n  blogService\r\n    .removeEntry(blogToUpdate.id)\r\n    .then( response => {\r\n      console.log(blogToUpdate.title)\r\n      setAlertMessage(\r\n        `Deleted ${blogToUpdate.title}'s entry`\r\n      )\r\n      setTimeout(() => {\r\n        setAlertMessage(null)\r\n      }, 5000)\r\n\r\n      //uses filter method on blogs state array to return a new array without the removed entry\r\n      setBlogs(blogs.filter(n => n.id !== id))\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `'${blogs[id-1].title}' was removed by another user`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setBlogs(blogs.filter(n => n.id !== blogs[id-1].id))     \r\n    })\r\n}}\r\n\r\n\r\n  //decides which function to call when the button is pressed \r\n  //depending on if the title is a new value or not\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // uses filter method on blogs array and creates a new array of blogs\r\n    //match the title field.\r\n    const isBlogExist = blogs.filter(\r\n      (item) => item.title.toLocaleLowerCase() === newTitle.toLowerCase()\r\n    ).length;\r\n\r\n      //if the isblogExist array is empty then the title field\r\n      //does not match any existing values, add the blog\r\n    if (!isBlogExist) {\r\n      addBlog();\r\n\r\n      //otherwise update the entry\r\n    } else {\r\n      updateBlog();\r\n    }\r\n\r\n    //reset the entry fields\r\n        setNewTitle('')\r\n        setNewAuthor('')\r\n        setNewUrl('')\r\n        setNewLikes('')\r\n  };\r\n\r\n  \r\n  //handles logging in\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n    try {\r\n      const user = await loginService.login({\r\n        username, password,\r\n      })\r\n\r\n      blogService.setToken(user.token)\r\n      setUser(user)\r\n      console.log('logging in with', username, password)\r\n      setNewUsername('')\r\n      setNewPassword('')\r\n    } catch (exception) {\r\n      setErrorMessage('Wrong credentials')\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  \r\n\r\n\r\n  const handlePasswordChange =(event) => {\r\n    setNewPassword(event.target.value)\r\n  }\r\nconst handleUsernameChange =(event) => {\r\n  setNewUsername(event.target.value)\r\n}\r\n  \r\n  //these change the fields when user types\r\n  const handleTitleChange = (event) => {\r\n   setNewTitle(event.target.value)\r\n  }\r\n  const handleAuthorChange = (event) => {\r\n  setNewAuthor(event.target.value)\r\n  }\r\n  const handleUrlChange = (event) => {\r\n  setNewUrl(event.target.value)\r\n  }\r\n  const handleLikesChange = (event) => {\r\n    setNewLikes(event.target.value)\r\n    }\r\n\r\n\r\n\r\n  const handleSearchChange = (event) => {\r\n  setNewSearch(event.target.value)\r\n  }\r\n\r\n\r\n  \r\n  //filters the blogs array to only display entrys that match the search field\r\n  const blogsToShow =  blogs.filter(blog => blog.title.toLowerCase().includes(newSearch) === true)\r\n    console.log('user looks like', user)\r\n  \r\n  return (\r\n\r\n      //layout and call components\r\n    <div>\r\n      <h1>Blog List</h1>\r\n      <Error message= {errorMessage}/>\r\n      <Notification message={alertMessage} />\r\n   \r\n      <h3>Search</h3>\r\n      <Search newSearch={newSearch} handleSearchChange={handleSearchChange} />\r\n      <h3>Update Blog List</h3>\r\n\r\n      {user === null ?\r\n      <Login handlePasswordChange={handlePasswordChange} handleUsernameChange={handleUsernameChange} handleLogin={handleLogin} username={username} password={password}/> :\r\n      <div>\r\n      <p>{user.username} logged-in</p>\r\n      <Form addBlog={handleFormSubmit} newTitle={newTitle} handleTitleChange={handleTitleChange} newAuthor={newAuthor} handleAuthorChange={handleAuthorChange} newUrl={newUrl}\r\n      handleUrlChange={handleUrlChange} newLikes={newLikes} handleLikesChange={handleLikesChange}/>\r\n      <Blogs blogsToShow={blogsToShow} Blog={Blog} removeEntry={removeEntry}/>\r\n      </div>\r\n    }\r\n      \r\n      \r\n     \r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default App","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Form.js",[],"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Blog.js",[],"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Search.js",[],"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Blogs.js",[],"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Notification.js",[],"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Error.js",[],["53","54"],"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\services\\blogbook.js",[],"C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\services\\login.js",["55"],"import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n  const response = await axios.post(baseUrl, credentials)\r\n  return response.data\r\n}  \r\nexport default { login }","C:\\Users\\Brian\\fullStack\\part4\\blogList\\blogListFrontend\\src\\components\\Login.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":2,"column":38,"nodeType":"62","messageId":"63","endLine":2,"endColumn":57},{"ruleId":"56","replacedBy":"64"},{"ruleId":"58","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":8,"column":1,"nodeType":"68","endLine":8,"endColumn":25},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'useImperativeHandle' is defined but never used.","Identifier","unusedVar",["69"],["70"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]